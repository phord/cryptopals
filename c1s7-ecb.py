#!/usr/bin/python

from mycrypto import *

#http://cryptopals.com/sets/1/challenges/7
# openssl enc -d -a -nosalt -aes-128-ecb -K 59454c4c4f57205355424d4152494e45 -in 7.txt

b64 = ''.join([line.rstrip('\n') for line in open('7.txt')])
enc = b642bin(b64)
key = txt2bin('YELLOW SUBMARINE')

sbox = [
    # 0     1    2      3     4    5     6     7      8     9     A      B    C     D     E     F
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, #0
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, #1
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, #2
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, #3
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, #4
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, #5
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, #6
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, #7
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, #8
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, #9
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, #A
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, #B
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, #C
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, #D
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, #E
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16] #F

rsbox = [
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d]

def getSBoxValue(num):
    return sbox[num]

def matrix_Subst(vec):
    return [ [sbox[x] for x in row] for row in vec]

def getSBoxInvert(num):
    return rsbox[num]

Rcon = [
    0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
    0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
    0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
    0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d,
    0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab,
    0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d,
    0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25,
    0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01,
    0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d,
    0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa,
    0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a,
    0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02,
    0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
    0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
    0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
    0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
    0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f,
    0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5,
    0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33,
    0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb]

def getRconValue(num):
    return Rcon[num]
#____________________________________________________________________________

def rotate(vec):
    return vec[1:]+vec[:1]

def core(word, iteration):
    # rotate the 32-bit word 8 bits to the left
    word = rotate(word)
    # apply S-Box substitution on all 4 parts of the 32-bit word
    word = [ getSBoxValue(x) for x in word ]
    # XOR the output of the rcon operation with i to the first part (leftmost) only
    word[0] = word[0]^getRconValue(iteration)
    return word
#____________________________________________________________________________
# Rijndael's key expansion
#  expands an 128,192,256 key into an 176,208,240 bytes key
#
# expandedKey is a pointer to an char array of large enough size
# key is a pointer to a non-expanded key

def expandKey(key):
    key_size = len(key)
    expandedKeySize = {16:176, 24:208, 32:240}[key_size]
    rconIteration = 0

    # set the 16,24,32 bytes of the expanded key to the input key
    expandedKey = key[:]
    while (len(key) < expandedKeySize):
        # assign the previous 4 bytes to the temporary value t
        t = key[-4:]

        # every 16,24,32 bytes we apply the core schedule to t and increment rconIteration afterwards
        if len(key) % key_size == 0:
            rconIteration += 1
            t = core(t, rconIteration)

        # For 256-bit keys, we add an extra sbox to the calculation
        if key_size == 32 and (len(key) % 32) == 16:
            t = [ getSBoxValue(x) for x in t ]

        # We XOR t with the four-byte block 16,24,32 bytes before the new expanded key.
        # This becomes the next four bytes in the expanded key.
        key += enc_xor(key[-key_size:-key_size+4], t)

    return key

def aes_bin2matrix(vec):
    vec = blockSplit(blockSplit(vec, 4), 4)
    return [ transpose(x,4) for x in vec ]

def matrix_rotateLeft(vec):
    return [ vec[n][n:] + vec[n][:n] for n in range(len(vec))]

def matrix_rotateRight(vec):
    return [ vec[n][:-n] + vec[n][n:] for n in range(len(vec))]

MixMatrix = aes_bin2matrix([2,1,1,3,3,2,1,1,1,3,2,1,1,1,3,2])[0]
def GF(x,y):
    if y==1: return x
    if y==2: return ((x*2)^(0x1b if x>127 else 0) ) % 256
    if y==3: return ((x*2)^(0x1b if x>127 else 0)^x ) % 256
    return -1

def xor(vec):
    vec = [GF(x,y) for x,y in vec]
    x=vec[0]
    for y in vec[1:]:
        x ^= y
    return x

def matrix_mix(vec):
    return transpose([ [ xor([(vec[z][y],MixMatrix[x][z]) for z in range(4)]) for x in range(4)] for y in range(4)],4)

def matrix_rotateRight(vec):
    return [ vec[n][:-n] + vec[n][n:] for n in range(len(vec))]

def rotateRight(row, n):
    return row[:-n] + row[n:]

def InvShiftRows(state):
    return [rotateRight(state[x],x) for x in range(4)]

def InvSubBytes(state):
    return state

def AddRoundKey(state,key):
    return state

def InvMixColumns(state):
    return state


def aes_decrypt(vec, key):
    key = expandKey(key)
    first = len(key)-16

    state = transpose( blockSplit(vec,4), 4)

    # Perform the necessary number of rounds. The round key is added first.
    # The last round does not perform the MixColumns step.

    state = AddRoundKey(state,key[first:first+16])

    for pos in range(first-16,-16,-16):
        state = InvShiftRows(state)
        state = InvSubBytes(state)
        state = AddRoundKey(state,key[pos:pos+16])
        if pos > 0:
            state = InvMixColumns(state)

    state = transpose(state, 4)
    state = [y for x in state for y in x]

for x in blockSplit(expandKey([0]*16), 16):
    print bin2hex(x)

print

def matrix_print(mat):
    for x in mat:
        print ' '.join(blockSplit(bin2hex(x),2))
    print "  --"

def aes_encrypt(plaintext, password):
    plaintext = aes_bin2matrix(plaintext)
    roundkey = aes_bin2matrix(expandKey(password))

    vec = []
    for state in plaintext:
        for i in range(len(roundkey)):
            if i > 0:
                state = matrix_Subst(state)
                state = matrix_rotateLeft(state)
            if i > 0 and i < len(roundkey)-1:
                state = matrix_mix(state)
            key = roundkey[i]
            state = matrix_xor(state, key)
        vec += [ x for y in transpose(state) for x in y ]
    return vec

plaintext = txt2bin('Two One Nine Two')
password = txt2bin('Thats my Kung Fu')

vec = aes_encrypt(plaintext, password)
print ' '.join(blockSplit(bin2hex(vec),2))

def ecb_128(bin, key):
    return

def dec_aes_128_ecb(bin, key):
    return

#print bin2str(dec_ecb(enc, key))
